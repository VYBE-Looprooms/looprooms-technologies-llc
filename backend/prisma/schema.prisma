// VYBE LOOPROOMSâ„¢ - Prisma Database Schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

enum UserRole {
  MEMBER
  CREATOR
  MODERATOR
  ADMIN
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
}

enum PrivacyLevel {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
  ANONYMOUS
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  role        UserRole @default(MEMBER)
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Authentication
  authProvider    AuthProvider
  authProviderId  String?
  passwordHash    String?
  emailVerifiedAt DateTime?
  
  // Privacy & Safety
  allowsAnonymousMode Boolean @default(true)
  defaultPrivacyLevel PrivacyLevel @default(PUBLIC)
  blockedUsers        String[] // Array of user IDs
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActiveAt DateTime @default(now())
  
  // Relations
  profile      UserProfile?
  creatorApplication CreatorApplication?
  looprooms    Looproom[]
  loopchains   Loopchain[]
  sharedVybes  SharedVybe[]
  reactions    Reaction[]
  comments     Comment[]
  subscriptions Subscription[]
  userProgress UserProgress[]
  looplistItems LooplistItem[]
  reviewedApplications  CreatorApplication[] @relation("ApplicationReviewer")

  // Live Session Relations
  createdSessions    LiveSession[] @relation("SessionCreator")
  sessionParticipations SessionParticipant[]
  sessionComments    SessionComment[]
  commentReactions   CommentReaction[]
  
  // Indexes
  @@map("users")
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  
  // Basic Info
  firstName    String?
  lastName     String?
  displayName  String?
  bio          String?
  avatarUrl    String?
  
  // Wellness Profile
  currentMood     String? // JSON string for mood data
  wellnessGoals   String[] // Array of goal strings
  preferredCategories Category[]
  
  // Stats & Gamification
  totalStreakDays    Int @default(0)
  currentStreakDays  Int @default(0)
  completedLoopchains Int @default(0)
  vibesShared        Int @default(0)
  positiveReactions  Int @default(0)
  
  // Privacy Settings (overrides user defaults)
  showStats        Boolean @default(true)
  showProgress     Boolean @default(true)
  allowDirectMessages Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// Creator Application Model - Identity Verification Focus
model CreatorApplication {
  id       String @id @default(cuid())
  userId   String @unique
  
  // Basic Information
  firstName    String
  lastName     String
  phoneNumber  String?
  bio          String // Why they want to be a creator (max 500 chars)
  
  // Looproom Interest - Only 3 core categories
  interestedCategories String[] // Array: ["RECOVERY", "FITNESS", "MEDITATION"]
  primaryCategory      String   // Main focus category
  
  // Identity Verification - Primary Method (Required)
  identityDocumentType   IdentityDocumentType // NATIONAL_ID, PASSPORT, DRIVERS_LICENSE
  identityDocumentUrl    String               // Secure S3/Cloudinary URL to document image
  identityDocumentBackUrl String?             // Secure URL to back of document
  identityDocumentNumber String?              // Optional reference number
  
  // Face Verification - Secondary Method (Optional but recommended)
  faceVerificationUrl       String?  // Secure URL to selfie/face scan
  faceVerificationCompleted Boolean @default(false)
  faceVerificationScore     Float?   // AI confidence score (0-1)
  
  // Additional Context (Optional)
  experience       String?  // Brief description of relevant experience
  socialMediaLinks String[] // Array of social media URLs for context
  
  // Application Processing
  status              ApplicationStatus @default(PENDING)
  reviewNotes         String?           // Admin review comments
  reviewedBy          String?           // Admin user ID
  reviewedAt          DateTime?
  rejectionReason     String?           // Specific rejection reason
  additionalInfoRequested String?       // What additional info is needed
  
  // Security & Compliance
  ipAddress          String?   // IP when application submitted
  userAgent          String?   // Browser info for fraud detection
  termsAcceptedAt    DateTime @default(now())
  privacyPolicyAcceptedAt DateTime @default(now())
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer    User? @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])
  
  // Ensure only one application per user
  @@map("creator_applications")
}

// ================================
// CONTENT STRUCTURE
// ================================

enum ContentType {
  VIDEO
  AUDIO
  IMAGE
  TEXT
  MIXED
}

enum IdentityDocumentType {
  NATIONAL_ID
  PASSPORT
  DRIVERS_LICENSE
}

enum LooproomStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  RESTRICTED
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String? // Hex color for UI
  iconUrl     String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  
  // Relations
  looprooms    Looproom[]
  userProfiles UserProfile[]
  
  @@map("categories")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique
  
  // Relations
  looproomTags LooproomTag[]
  
  @@map("tags")
}

model Looproom {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String?
  thumbnail   String?
  contentType ContentType
  contentUrl  String
  duration    Int? // Duration in seconds
  status      LooproomStatus @default(DRAFT)
  
  // Creator & Attribution
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  
  // Categorization
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  // Engagement & Stats
  viewCount      Int @default(0)
  reactionCount  Int @default(0)
  shareCount     Int @default(0)
  averageRating  Float? // 1-5 stars, optional
  
  // Content Metadata
  transcription  String? // For accessibility
  keywords       String[] // Search optimization
  difficulty     String? // "Beginner", "Intermediate", "Advanced"
  
  // Premium Features
  isPremium      Boolean @default(false)
  previewDuration Int? // Seconds of free preview
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishedAt DateTime?
  
  // Relations
  tags           LooproomTag[]
  reactions      Reaction[]
  loopchainSteps LoopchainStep[]
  sharedVybes    SharedVybe[]
  looplistItems  LooplistItem[]
  liveSessions   LiveSession[]
  
  @@map("looprooms")
}

model LooproomTag {
  id         String @id @default(cuid())
  looproomId String
  tagId      String
  
  // Relations
  looproom Looproom @relation(fields: [looproomId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([looproomId, tagId])
  @@map("looproom_tags")
}

// ================================
// LOOPCHAINS (GUIDED JOURNEYS)
// ================================

enum LoopchainStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Loopchain {
  id          String          @id @default(cuid())
  title       String
  slug        String          @unique
  description String?
  thumbnail   String?
  status      LoopchainStatus @default(DRAFT)
  
  // Creator
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])
  
  // Journey Metadata
  estimatedDuration Int? // Total minutes to complete
  difficulty        String? // "Beginner", "Intermediate", "Advanced"
  goals             String[] // Array of wellness goals this addresses
  
  // Engagement
  enrollmentCount Int @default(0)
  completionCount Int @default(0)
  averageRating   Float?
  
  // Premium
  isPremium Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  // Relations
  steps        LoopchainStep[]
  userProgress UserProgress[]
  
  @@map("loopchains")
}

model LoopchainStep {
  id           String @id @default(cuid())
  loopchainId  String
  looproomId   String
  stepNumber   Int
  title        String?
  description  String?
  isOptional   Boolean @default(false)
  
  // Step-specific settings
  minCompletionTime Int? // Minimum seconds to consider "completed"
  requiresInteraction Boolean @default(false)
  
  // Relations
  loopchain Loopchain @relation(fields: [loopchainId], references: [id], onDelete: Cascade)
  looproom  Looproom  @relation(fields: [looproomId], references: [id])
  userProgress UserProgress[]
  
  @@unique([loopchainId, stepNumber])
  @@map("loopchain_steps")
}

// ================================
// USER PROGRESS & ENGAGEMENT
// ================================

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

model UserProgress {
  id              String         @id @default(cuid())
  userId          String
  loopchainId     String
  loopchainStepId String?
  status          ProgressStatus @default(NOT_STARTED)
  
  // Progress Tracking
  currentStep     Int @default(1)
  completedSteps  Int @default(0)
  totalSteps      Int
  progressPercent Float @default(0)
  
  // Engagement Metrics
  timeSpent       Int @default(0) // Total seconds spent
  confidenceLevel Int? // 1-10 self-reported confidence
  moodBefore      String? // JSON mood data
  moodAfter       String? // JSON mood data
  
  // Timestamps
  startedAt   DateTime @default(now())
  lastActiveAt DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  loopchain     Loopchain      @relation(fields: [loopchainId], references: [id], onDelete: Cascade)
  loopchainStep LoopchainStep? @relation(fields: [loopchainStepId], references: [id])
  
  @@unique([userId, loopchainId])
  @@map("user_progress")
}

// ================================
// SHARED VYBES (SOCIAL FEED)
// ================================

enum SharedVybeType {
  REFLECTION
  MILESTONE
  INSPIRATION
  GRATITUDE
  PROGRESS_UPDATE
}

model SharedVybe {
  id      String         @id @default(cuid())
  userId  String
  type    SharedVybeType @default(REFLECTION)
  content String // Main post content
  
  // Privacy & Safety
  isAnonymous Boolean @default(false)
  privacyLevel PrivacyLevel @default(PUBLIC)
  
  // Content Association
  looproomId  String? // Optional link to related Looproom
  loopchainId String? // Optional link to related Loopchain
  
  // Engagement
  reactionCount Int @default(0)
  commentCount  Int @default(0)
  shareCount    Int @default(0)
  
  // Moderation
  isReported    Boolean @default(false)
  reportCount   Int @default(0)
  moderatedAt   DateTime?
  moderatorNote String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  looproom  Looproom?  @relation(fields: [looproomId], references: [id])
  reactions Reaction[]
  comments  Comment[]
  
  @@map("shared_vybes")
}

// ================================
// SOCIAL INTERACTIONS
// ================================

enum ReactionType {
  HEART
  CLAP
  FIRE
  PEACE
  INSPIRE
  STRENGTH
  GRATITUDE
  MINDFUL
}

enum ReactableType {
  LOOPROOM
  SHARED_VYBE
  COMMENT
}

model Reaction {
  id           String        @id @default(cuid())
  userId       String
  type         ReactionType
  reactableType ReactableType
  reactableId  String
  isAnonymous  Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  looproom    Looproom?   @relation(fields: [reactableId], references: [id], onDelete: Cascade, map: "reactions_looproom_fkey")
  sharedVybe  SharedVybe? @relation(fields: [reactableId], references: [id], onDelete: Cascade, map: "reactions_sharedvybe_fkey")
  
  // Prevent duplicate reactions from same user
  @@unique([userId, reactableType, reactableId, type])
  @@map("reactions")
}

model Comment {
  id           String @id @default(cuid())
  userId       String
  sharedVybeId String
  content      String
  isAnonymous  Boolean @default(false)
  
  // Moderation
  isReported    Boolean @default(false)
  reportCount   Int @default(0)
  moderatedAt   DateTime?
  moderatorNote String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedVybe SharedVybe @relation(fields: [sharedVybeId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// ================================
// USER COLLECTIONS & FAVORITES
// ================================

model LooplistItem {
  id         String @id @default(cuid())
  userId     String
  looproomId String
  
  // Organization
  notes      String?
  isFavorite Boolean @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  looproom Looproom @relation(fields: [looproomId], references: [id], onDelete: Cascade)
  
  @@unique([userId, looproomId])
  @@map("looplist_items")
}

// ================================
// SUBSCRIPTION & MONETIZATION
// ================================

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
}

enum SubscriptionTier {
  FREE
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
  CREATOR_PRO
}

model Subscription {
  id       String             @id @default(cuid())
  userId   String
  tier     SubscriptionTier
  status   SubscriptionStatus @default(TRIAL)
  
  // Billing
  stripeCustomerId     String?
  stripeSubscriptionId String?
  priceId              String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean @default(false)
  
  // Trial
  trialStart DateTime?
  trialEnd   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
  @@map("subscriptions")
}

// ================================
// SYSTEM & MODERATION
// ================================

enum ReportType {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  SAFETY_CONCERN
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model Report {
  id          String       @id @default(cuid())
  reporterId  String
  reportedType String      // 'user', 'shared_vybe', 'comment', etc.
  reportedId  String
  type        ReportType
  status      ReportStatus @default(PENDING)
  description String?
  
  // Moderation
  reviewedBy   String? // Admin/Moderator user ID
  reviewedAt   DateTime?
  resolution   String?
  actionTaken  String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reports")
}

// ================================
// ANALYTICS & INSIGHTS
// ================================

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  userAgent String?
  ipAddress String?
  
  // Session Data
  startTime    DateTime @default(now())
  endTime      DateTime?
  duration     Int? // Seconds
  pageViews    Int @default(1)
  interactions Int @default(0)
  
  @@map("user_sessions")
}



model ContentAnalytics {
  id         String   @id @default(cuid())
  contentType String  // 'looproom', 'shared_vybe', etc.
  contentId  String
  date       DateTime @default(now())

  // Metrics
  views      Int @default(0)
  reactions  Int @default(0)
  comments   Int @default(0)
  shares     Int @default(0)
  completions Int @default(0) // For Looprooms

  @@unique([contentType, contentId, date])
  @@map("content_analytics")
}

// ================================
// LIVE SESSIONS & PARTICIPANTS
// ================================

enum SessionStatus {
  SCHEDULED
  ACTIVE
  ENDED
  CANCELLED
}

enum ParticipantStatus {
  JOINED
  LEFT
  KICKED
  BANNED
}

model LiveSession {
  id          String        @id @default(cuid())
  looproomId  String
  creatorId   String
  title       String?       // Optional custom title for this specific session
  description String?       // Optional description for this session
  status      SessionStatus @default(SCHEDULED)

  // Session Timing
  scheduledStartTime DateTime
  actualStartTime    DateTime?
  endTime           DateTime?
  duration          Int? // Planned duration in minutes
  actualDuration    Int? // Actual duration in minutes

  // Capacity Management
  maxParticipants   Int @default(30)
  currentParticipants Int @default(0)

  // Session Settings
  allowAnonymous    Boolean @default(true)
  requiresApproval  Boolean @default(false)
  isRecorded       Boolean @default(false)
  recordingUrl     String?

  // Moderation
  isMuted          Boolean @default(false) // Creator can mute all participants
  isLocked         Boolean @default(false) // Prevent new participants from joining
  moderatorNotes   String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  looproom     Looproom @relation(fields: [looproomId], references: [id], onDelete: Cascade)
  creator      User     @relation("SessionCreator", fields: [creatorId], references: [id])
  participants SessionParticipant[]
  comments     SessionComment[]

  @@map("live_sessions")
}

model SessionParticipant {
  id            String            @id @default(cuid())
  sessionId     String
  userId        String
  status        ParticipantStatus @default(JOINED)

  // Participant Settings
  isAnonymous   Boolean @default(false)
  displayName   String? // Anonymous display name
  isMuted       Boolean @default(false)
  isModerator   Boolean @default(false)

  // Engagement Tracking
  joinedAt      DateTime @default(now())
  leftAt        DateTime?
  totalTimeInSession Int @default(0) // Seconds
  messagesCount Int @default(0)
  reactionsCount Int @default(0)

  // Mood Tracking (optional wellness feature)
  moodBefore    String? // JSON mood data when joining
  moodAfter     String? // JSON mood data when leaving

  // Relations
  session LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("session_participants")
}

model SessionComment {
  id          String  @id @default(cuid())
  sessionId   String
  userId      String
  content     String
  isAnonymous Boolean @default(false)

  // Message Threading (optional - for replies)
  parentId    String?
  parent      SessionComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     SessionComment[] @relation("CommentReplies")

  // Reactions to comments
  reactionCount Int @default(0)

  // Moderation
  isDeleted     Boolean @default(false)
  deletedAt     DateTime?
  deletedBy     String? // User ID of moderator who deleted
  isReported    Boolean @default(false)
  reportCount   Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  session LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions CommentReaction[]

  @@map("session_comments")
}

model CommentReaction {
  id        String      @id @default(cuid())
  commentId String
  userId    String
  type      ReactionType

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  comment SessionComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@map("comment_reactions")
}
